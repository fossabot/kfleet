server.port: 8083
spring.application.name: car-service

spring.cloud.stream:
  schema-registry-client:
    endpoint: http://localhost:8081

spring.cloud.stream.bindings:
  cars_out:
    destination: cars
  car_events_out:
    destination: car_events
  owner_commands_out:
    destination: owner_commands
    producer:
      useNativeEncoding: true
  cars:
    destination: cars
  owner_commands:
    destination: owner_commands
    consumer:
      useNativeDecoding: true

spring.cloud.stream.kafka.streams.binder.configuration:
  schema.registry.url: ${spring.cloud.stream.schema-registry-client.endpoint}
  value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
  specific.avro.reader: true
  application.server: localhost:${server.port}
  commit.interval.ms: 100
  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
  default.deserialization.exception.handler: io.kfleet.cars.service.configuration.CustomDeserializationExceptionHandler

#default producer config for all kafka binder bindings
spring.cloud.stream.kafka.binder.producerProperties:
  key.serializer: org.apache.kafka.common.serialization.StringSerializer
  value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
  value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
  schema.registry.url: ${spring.cloud.stream.schema-registry-client.endpoint}

spring.cloud.stream.kafka.bindings:
  owner_commands_out:
    producer:
      sync: true

  cars_out:
    producer:
      configuration:
        key.serializer: org.apache.kafka.common.serialization.StringSerializer
  cars:
    consumer:
      configuration:
        key.deserializer: org.apache.kafka.common.serialization.StringDeserializer


spring.cloud.stream.kafka.streams.bindings.cars:
  consumer:
    applicationId: cars-service-repo
    materializedAs: all-cars
    #value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde


spring.cloud.stream.kafka.streams.bindings.owner_commands:
  consumer:
    applicationId: cars-service-owner-commands




#error if not at least 3 broker: Number of alive brokers '1' does not meet the required replication factor '3' for the transactions state topic
#spring.cloud.stream.kafka.streams.binder.configuration.processing.guarantee: exactly_once


management.endpoints.web.exposure.include: "*"

#logging.level.org: WARN
logging.level.io.kfleet: DEBUG
#logging.level.org.springframework.cloud.stream.binding: DEBUG

cars.service.simulation.enabled: false
